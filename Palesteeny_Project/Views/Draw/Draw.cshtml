@{

    Layout = null;
}


<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8" />
    <title>تسالي الرسام</title>
    <link rel="stylesheet" href="~/css/Draw1.css">
    <style>




       
    </style>
</head>
<body>
 
 

    <div class="tab-wrapper">
        <button class="tab active" data-mode="free">رسم حر</button>
        <button class="tab" data-mode="template">رسم مع قالب</button>
    </div>

    <div class="drawing-area">
        <canvas id="canvas" width="780" height="460"></canvas>

        <img id="templateImage" src="" style="
    position: absolute;
    top: 0; left: 0;
    width: 600px;
    height: 400px;
    opacity: 0.3;
    pointer-events: none;
    z-index: 1;
  border-radius: 10px;
" />


        <input type="range" id="brushSizeSlider" min="1" max="50" value="5">



        <div id="templateContainer">
            <div id="categoryView">
                @foreach (var category in Model.Categories)
                {
                    <button class="category-btn" data-cat="@category">@category</button>
                }
            </div>


            <div id="templatesView" style="display:none;">
                <button id="backToCategoriesBtn">
                    رجوع إلى التصنيفات
                    <img src="@Url.Content("~/images/ion_arrow-undo.png")" alt="رجوع" class="icon" />

                </button>
                <div id="templatesList"></div>
            </div>


        </div>
    </div>

    
    <div class="tools download-tools">
        <button class="tool" onclick="saveDrawing()">
            <img src="@Url.Content("~/images/downloadicon.png")" alt="download" class="tool-icon" />

            <span style="display: block; font-size: 14px; margin-top: -10px; color: rgb(132, 232, 73);flex-direction: column; align-items: center;">
                احفظ رسمتي
            </span>
        </button>
    </div>

    <div class="share-drawing">
        <button class="tool" onclick="shareDrawing()">
            <img src="@Url.Content("~/images/uploadicon.png")" alt="upload" class="tool-icon" />

            <span style="display: block; font-size: 14px; margin-top: -10px; color: rgb(255, 0, 0); flex-direction: column; align-items: center;">
                شارك رسمتي
            </span>
        </button>
    </div>


    <div style="padding-top: -20px;padding-right: 10px;padding-bottom: 70px;padding-left: 10px;z-index: 2;">

    <div class="tools" style="">
        <button class="tool" id="pencilBtn" onclick="setBrush('normal', this)">
            <img src="@Url.Content("~/images/pencil.png")" alt="Pencil" class="tool-icon" />

        </button>

        <button class="tool" onclick="setBrush('marker', this)">
            <img src="@Url.Content("~/images/marker.png")" alt="Pencil" class="tool-icon" />


        </button>
        <button class="tool" onclick="setBrush('spray', this)">
            <img src="@Url.Content("~/images/spray.png")" alt="Pencil" class="tool-icon" />


        </button>
        <button class="tool" onclick="setBrush('eraser', this)">
            <img src="@Url.Content("~/images/eraser.png")" alt="Pencil" class="tool-icon" />


        </button>

        <div id="colorPalette" style="top: -510px">
            <div id="colorCircle">
                <input type="color" id="colorPicker" title="اختر لون">
            </div>
        </div>


        <button class="tool" onclick="redo()">

            <img src="@Url.Content("~/images/ion_arrow-redo.png")" alt="redo" class="tool-icon" />
        </button>
        <button class="tool" onclick="undo()">
            <img src="@Url.Content("~/images/ion_arrow-undo.png")" alt="undo" class="tool-icon" />


        </button>


        <button id="clearCanvas">
            <img src="@Url.Content("~/images/newdraw.png")" alt="بدء جديد" class="btn-icon" />

            بدء رسمة جديدة
        </button>

    </div>
    </div>

    <input type="hidden" id="userPalId" value="@ViewBag.UserPalId" />
    


        <script>
                function hexToRgba(hex, alpha) {
                  if (hex.length === 4) {
                    hex = "#" + hex[1]+hex[1] + hex[2]+hex[2] + hex[3]+hex[3];
                  }
                  const r = parseInt(hex.slice(1,3),16),
                        g = parseInt(hex.slice(3,5),16),
                        b = parseInt(hex.slice(5,7),16);
                  return `rgba(${r},${g},${b},${alpha})`;
                }

                const canvas = document.getElementById("canvas"),
                      ctx = canvas.getContext("2d");
                let painting = false,
                    brush = "normal",
                    currentColor = "#000000",
                    lineWidth = 5,
                    undoStack = [],
                    redoStack = [];

                const colors = ["#000","#f00","#0f0","#00f","#ff0","#f0f","#0ff"],
                      palette = document.getElementById("colorPalette");

                colors.forEach(col => {
                  const sw = document.createElement("div");
                  sw.className = "color-swatch";
                  sw.style.backgroundColor = col;
                  sw.onclick = () => {
                    currentColor = col;
                    colorCircle.style.backgroundImage = "none";
                    colorCircle.style.backgroundColor = col;
                    updateCursor();
                  };
                  palette.appendChild(sw);
                });
            const states = {
              free: { imageData: null, templateSrc: "", undoStack: [], redoStack: [] },
              template: { imageData: null, templateSrc: "", undoStack: [], redoStack: [] }
            };

            let currentMode = "free";
            function saveCurrentState() {
              states[currentMode].imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
              states[currentMode].templateSrc = document.getElementById("templateImage").src;
            }

            function loadState(mode) {
              if (states[mode].imageData) {
                ctx.putImageData(states[mode].imageData, 0, 0);
              } else {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
              }
              document.getElementById("templateImage").src = states[mode].templateSrc || "";
            }

                function startPos(e) { painting = true; saveState(); draw(e); }
                function endPos()   { painting = false; ctx.beginPath(); }
                function draw(e) {
                  if (!painting) return;
                  const rect = canvas.getBoundingClientRect(),
                        x = e.clientX - rect.left,
                        y = e.clientY - rect.top;
                  if (brush === "normal") {
                    ctx.lineWidth = lineWidth;
                    ctx.lineCap   = "round";
                    ctx.strokeStyle = currentColor;
                    ctx.lineTo(x,y); ctx.stroke();
                    ctx.beginPath(); ctx.moveTo(x,y);
                  } else if (brush === "marker") {
                    ctx.fillStyle = hexToRgba(currentColor, 0.3);
                    ctx.beginPath();
                    ctx.arc(x,y,lineWidth,0,Math.PI*2);
                    ctx.fill();
                  } else if (brush === "spray") {
                    ctx.fillStyle = currentColor;
                    for (let i=0; i<10; i++){
                      const offX = Math.random()*lineWidth*2 - lineWidth;
                      const offY = Math.random()*lineWidth*2 - lineWidth;
                      ctx.fillRect(x+offX,y+offY,1,1);
                    }
                  } else if (brush === "eraser") {
                    ctx.clearRect(x-lineWidth/2,y-lineWidth/2,lineWidth,lineWidth);
                  }
                }

                function setBrush(type, el) {
                  brush = type;
                  document.querySelectorAll(".tool").forEach(b=>b.classList.remove("active"));
                  el.classList.add("active");

                  updateCursor();
                }

                function saveState() {
              const undoStack = states[currentMode].undoStack;
              const redoStack = states[currentMode].redoStack;

              undoStack.push(ctx.getImageData(0, 0, canvas.width, canvas.height));
              if (undoStack.length > 20) undoStack.shift();
              states[currentMode].redoStack = []; 
            }

                function undo() {
              const undoStack = states[currentMode].undoStack;
              const redoStack = states[currentMode].redoStack;

              if (!undoStack.length) return;
              redoStack.push(ctx.getImageData(0, 0, canvas.width, canvas.height));
              ctx.putImageData(undoStack.pop(), 0, 0);
            }

               function redo() {
              const undoStack = states[currentMode].undoStack;
              const redoStack = states[currentMode].redoStack;

              if (!redoStack.length) return;
              undoStack.push(ctx.getImageData(0, 0, canvas.width, canvas.height));
              ctx.putImageData(redoStack.pop(), 0, 0);
            }


                function updateCursor() {
                  let svg, encoded;

                  if (brush === "normal") {
                    svg = `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="${currentColor}" viewBox="0 0 512 512">
                      <path d="M362.7 19.3L314.3 67.7 444.3 197.7l48.4-48.4c25-25 25-65.5 0-90.5L453.3 19.3c-25-25-65.5-25-90.5 0zm-71 71L58.6 323.5c-10.4 10.4-18 23.3-22.2 37.4L1 481.2C-1.5 489.7 .8 498.8 7 505s15.3 8.5 23.7 6.1l120.3-35.4c14.1-4.2 27-11.8 37.4-22.2L421.7 220.3 291.7 90.3z"/>
                    </svg>`;
                  } else if (brush === "marker") {
                    svg = `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="${currentColor}" viewBox="0 0 576 512">
                      <path d="M315 315l158.4-215L444.1 70.6 229 229 315 315zm-187 5s0 0 0 0l0-71.7c0-15.3 7.2-29.6 19.5-38.6L420.6 8.4C428 2.9 437 0 446.2 0c11.4 0 22.4 4.5 30.5 12.6l54.8 54.8c8.1 8.1 12.6 19 12.6 30.5c0 9.2-2.9 18.2-8.4 25.6L334.4 396.5c-9 12.3-23.4 19.5-38.6 19.5L224 416l-25.4 25.4c-12.5 12.5-32.8 12.5-45.3 0l-50.7-50.7c-12.5-12.5-12.5-32.8 0-45.3L128 320zM7 466.3l63-63 70.6 70.6-31 31c-4.5 4.5-10.6 7-17 7L24 512c-13.3 0-24-10.7-24-24l0-4.7c0-6.4 2.5-12.5 7-17z"/>
                    </svg>`;
                  } else if (brush === "spray") {
                    svg = `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="${currentColor}" viewBox="0 0 512 512">
                    <g transform="scale(-1,1) translate(-512,0)">
                      <path d="M96 0H160V64H96V0zM64 96H192C209.7 96 224 110.3 224 128V352C224 369.7 209.7 384 192 384H64C46.3 384 32 369.7 32 352V128C32 110.3 46.3 96 64 96zM320 192A32 32 0 1 1 384 192A32 32 0 1 1 320 192zM320 96A32 32 0 1 1 384 96A32 32 0 1 1 320 96zM416 288A32 32 0 1 1 480 288A32 32 0 1 1 416 288zM320 288A32 32 0 1 1 384 288A32 32 0 1 1 320 288zM416 192A32 32 0 1 1 480 192A32 32 0 1 1 416 192z"/>
                    </g>
                  </svg>`;
                  } else if (brush === "eraser") {
                    svg = `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="${currentColor}" viewBox="0 0 576 512">
                    <path d="M290.7 57.4L57.4 290.7c-25 25-25 65.5 0 90.5l80 80c12 12 28.3 18.7 45.3 18.7L288 480l9.4 0L512 480c17.7 0 32-14.3 32-32s-14.3-32-32-32l-124.1 0L518.6 285.3c25-25 25-65.5 0-90.5L381.3 57.4c-25-25-65.5-25-90.5 0zM297.4 416l-9.4 0-105.4 0-80-80L227.3 211.3 364.7 348.7 297.4 416z"/>
                  </svg>`;
                  } else {
                    canvas.style.cursor = "crosshair";
                    return;
                  }

                  encoded = encodeURIComponent(svg).replace(/'/g, "%27").replace(/"/g, "%22");
                  canvas.style.cursor = `url("data:image/svg+xml,${encoded}") 0 32, auto`;
                }

                canvas.addEventListener("mousedown", startPos);
                canvas.addEventListener("mouseup",   endPos);
                canvas.addEventListener("mousemove", draw);

                const colorPicker = document.getElementById("colorPicker"),
                      colorCircle = document.getElementById("colorCircle");
                colorPicker.addEventListener("input", () => {
                  currentColor = colorPicker.value;
                  colorCircle.style.backgroundImage = "none";
                  colorCircle.style.backgroundColor = currentColor;
                  updateCursor();
                });

                document.getElementById("clearCanvas")
                  .addEventListener("click", ()=>{ ctx.clearRect(0, 0, canvas.width, canvas.height);
            states[currentMode].undoStack = [];
            states[currentMode].redoStack = [];
             });

              document.querySelectorAll(".tab").forEach(tab => {
              tab.addEventListener("click", () => {
                saveCurrentState();
                currentMode = tab.dataset.mode;
                loadState(currentMode);

                document.querySelectorAll(".tab").forEach(t => t.classList.remove("active"));
                tab.classList.add("active");

                const templateImage = document.getElementById("templateImage");

                if (currentMode === "template") {
                  document.getElementById("templateContainer").style.display = "block";
                  if (templateImage.src && templateImage.src !== window.location.href) {
            
                    templateImage.style.display = "block";
                  } else {
                    
                    templateImage.style.display = "none";
                  }
                } else {
                  document.getElementById("templateContainer").style.display = "none";
                  templateImage.style.display = "none";
                  templateImage.src = "";
                }
              });
            });

            const brushSizeSlider = document.getElementById("brushSizeSlider");
            brushSizeSlider.addEventListener("input", () => {
              lineWidth = +brushSizeSlider.value;
              updateCursor(); // refresh cursor with new size
            });
            const slider = document.getElementById('brushSizeSlider');

            function updateSlider() {
              const min = slider.min;
              const max = slider.max;
              const val = slider.value;

              
              const percent = ((val - min) / (max - min)) * 100;

           
              slider.style.background = `linear-gradient(to left, #4caf50 0%, #4caf50 ${percent}%, #c8e6c9 ${percent}%, #c8e6c9 100%)`;
            }

            slider.addEventListener('input', () => {
              updateSlider();
          
            });

            updateSlider(); 



                
                       async function loadCategories() {
          const response = await fetch('/Draw/GetCategories');
          const data = await response.json();
          const categoryView = document.getElementById("categoryView");
          categoryView.innerHTML = ""; 

          data.forEach(cat => {
            const btn = document.createElement("button");
            btn.className = "category-btn";
            btn.dataset.cat = cat;
            btn.textContent = cat;
            btn.addEventListener("click", () => loadTemplates(cat));
            categoryView.appendChild(btn);
          });
        }

        async function loadTemplates(category) {
          const response = await fetch(`/Draw/GetTemplatesByCategory?category=${encodeURIComponent(category)}`);
          const data = await response.json();

          const templatesList = document.getElementById("templatesList");
          templatesList.innerHTML = "";
          data.forEach(tpl => {
            const img = document.createElement("img");
            img.src = tpl.imageUrl;
            img.className = "template-option";
            img.addEventListener("click", () => {
              const templateImage = document.getElementById("templateImage");
              templateImage.src = img.src;
              templateImage.style.display = "block";
            });
            templatesList.appendChild(img);
          });

          document.getElementById("categoryView").style.display = "none";
          document.getElementById("templatesView").style.display = "block";
        }

        document.getElementById("backToCategoriesBtn").addEventListener("click", () => {
          document.getElementById("templatesView").style.display = "none";
          document.getElementById("categoryView").style.display = "block";
        });

       
        window.addEventListener("load", loadCategories);

                const categoryView = document.getElementById("categoryView");
                const templatesView = document.getElementById("templatesView");
                const templatesList = document.getElementById("templatesList");
                const backToCategoriesBtn = document.getElementById("backToCategoriesBtn");

                categoryView.querySelectorAll(".category-btn").forEach(btn => {
                  btn.addEventListener("click", () => {
                    const cat = btn.dataset.cat;
                    templatesList.innerHTML = "";
                    templates[cat].forEach(src => {
                      const img = document.createElement("img");
                      img.src = src;
                      img.className = "template-option";
                      templatesList.appendChild(img);

              document.querySelectorAll(".template-option").forEach(img => {
              img.addEventListener("click", () => {
                const templateImage = document.getElementById("templateImage");
                templateImage.src = img.src;
                templateImage.style.display = "block";  
              });
            });


                    });
                    categoryView.style.display = "none";
                    templatesView.style.display = "block";
                  });
                });

                backToCategoriesBtn.addEventListener("click", () => {
                  templatesView.style.display = "none";
                  categoryView.style.display = "block";
                });

                
                setBrush("normal", document.getElementById("pencilBtn"));



            function saveDrawing() {
              const tempCanvas = document.createElement("canvas");
              const tempCtx = tempCanvas.getContext("2d");

              tempCanvas.width = canvas.width;
              tempCanvas.height = canvas.height;

              tempCtx.fillStyle = "#ffffff";
              tempCtx.fillRect(0, 0, tempCanvas.width, tempCanvas.height);

             
              tempCtx.drawImage(canvas, 0, 0);

           
              const link = document.createElement("a");
              link.download = "my_drawing.png";
              link.href = tempCanvas.toDataURL("image/png");
              link.click();
            }

             async function shareDrawing() {
            const userPalId = document.getElementById("userPalId").value;

            
            if (!userPalId || isNaN(userPalId)) {
                if (confirm("🔒 يجب تسجيل الدخول لمشاركة رسمة.\nهل تريد الانتقال لصفحة التسجيل؟")) {
                    window.location.href = "/Account/Login"; 
                }
                return;
            }

            const imageData = canvas.toDataURL("image/png");

            const dto = {
                base64Image: imageData,
                mode: currentMode,
                templateId: currentMode === "template" ? extractTemplateId() : null,
                category: currentMode === "template" ? extractCategory() : null,
                userPalId: parseInt(userPalId)
            };

            const response = await fetch('/Draw/ShareDrawing', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(dto)
            });

            if (response.ok) {
                alert("🎉 رسمتك الجميلة اصبحت بالمعرض ");
            } else {
                alert("❌ فشل الحفظ");
            }
        }


        
        function extractTemplateId() {
         
          const src = document.getElementById("templateImage").src;
          const idMatch = src.match(/\/(\d+)\.(png|jpg|jpeg|svg)$/);
          return idMatch ? parseInt(idMatch[1]) : null;
        }

        function extractCategory() {
          const selected = document.querySelector(".category-btn.selected");
          return selected ? selected.dataset.cat : null;
        }


           
            function dataURLtoBlob(dataurl) {
              const arr = dataurl.split(",");
              const mime = arr[0].match(/:(.*?);/)[1];
              const bstr = atob(arr[1]);
              let n = bstr.length;
              const u8arr = new Uint8Array(n);
              while (n--) u8arr[n] = bstr.charCodeAt(n);
              return new Blob([u8arr], { type: mime });
            }

            
            document.querySelector(".share-drawing").addEventListener("click", shareDrawing);


        </script>
    <div class="cta-container" style="padding-top:40px">
        
        <div class="cta-badge">
            <a asp-controller="Draw" asp-action="Gallery" class="link-text">اذهب للمعرض</a>
        </div>
    </div>
</body>
</html>
